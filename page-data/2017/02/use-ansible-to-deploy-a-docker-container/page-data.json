{"componentChunkName":"component---src-templates-article-js","path":"/2017/02/use-ansible-to-deploy-a-docker-container","result":{"data":{"markdownRemark":{"html":"<h2>Deploying Environment</h2>\nDeploying containers to a remote server can be rather tedious. Sometimes all you need is to deploy your container on a remote server.\n<blockquote>Sometime budget and time constraints don't allow you to setup a full Kubernetes cluster. But for a prototype or landing page simplicity is best.</blockquote>\nWhenever I'm faced with a task that is tedious and repetitive, I see it as an opportunity to automate.\n<img src=\"/content/images/2017/02/docker-ansible.png\" alt=\"Docker + Ansible\">\n<p>I decided to try use <a href=\"https://www.ansible.com/\">Ansible</a> to deploy my <a href=\"https://getdocker.com\">Docker</a> containers.</p>\n<h2>Requirements</h2>\nTo follow this guide you need:\n<ul>\n \t<li>Remote host with ssh access</li>\n \t<li>Docker installed on the remote host</li>\n \t<li>Python Docker SDK <a href=\"https://github.com/docker/docker-py\">docker-py</a> installed on the remote host</li>\n \t<li>Container registry with an image ready to deploy</li>\n</ul>\nSetting up the registry and pushing the image will be covered in a future post.\n<h2>Ansible Environment</h2>\nThe majority of my projects involve some form of Python so I just install with pip\n<pre><code class=\"sh\">$ pip install --upgrade ansible\n</code></pre>\n<h4>Ops Folder</h4>\nFor a small project I like to keep all my devops related stuff in an <code>.ops</code> directory on the root of my project.\n<pre><code class=\"sh\">.ops\n├── deploy_staging.yml\n└── hosts\n</code></pre>\n<h2>Ansible Inventory File</h2>\nI like to store a list of servers in a <code>hosts</code> file.\n<pre><code class=\"ini\">[staging]\nstaging.jforte.me  ansible_host=45.32.235.197\n<p>[prod]\njforte.me\n</code></pre>\n<em>Ansible docs provide a list of <a href=\"http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters\">inventory parameters</a></em></p>\n<h3>Testing the connection</h3>\nTo test Ansible can connect to the server use the ping module\n<pre><code class=\"sh\">$ ansible -i hosts staging -m ping\nstaging.jforte.me | SUCCESS =&gt; {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n</code></pre>\n<em>If you are using certificates you will be prompted to enter a password.</em>\n<h2>Simple Deployment Playbook</h2>\nDeployment procedure is defined in a playbook called <code>deploy_staging.yml</code>:\n<pre><code class=\"yml\">---\n- hosts: staging\n  tasks:\n    - name: login to container registry\n      docker_login:\n        registry: registry.gitlab.com\n        username: JasonForte\n        password: passwordortoken\n        reauthorize: yes\n    - name: start a new container for web\n      docker_container:\n        name: web\n        image: registry.gitlab.com/jasonforte/jforte.me:web.1702.001-dev\n        pull: true\n        restart: yes\n        state: started\n        ports:\n          - \"8003:80\"\n<p></code></pre>\nHere I've defined the tasks to first login to the remote registry and then pull and start the new container. This is for my staging servers only.</p>\n<p><em>Ansible has a number of <a href=\"http://docs.ansible.com/ansible/list_of_all_modules.html\">builtin modules</a> for the playbooks.</em></p>\n<h2>Running the playbook</h2>\nRunning the playbook requires referencing the <code>hosts</code> file.\n<pre><code class=\"bash\">\n$ ansible-playbook -i hosts deploy_staging.yml\n</code></pre>\nIf this is successful you should see a new container running on the remote server.\n<h2>What's next?</h2>\nThe next step would be to write a task to reconfigure / restart your web server (nginx / HAProxy etc).\n<p>Once I'm happy with the playbook I will usually add it to a Makefile for easy access.</p>\n<pre><code class=\"Makefile\">\ndeploy:\n    ansible-playbook -i .ops/hosts .ops/deploy_staging.yml\n</code></pre>\n<p>I will tackle some of these next steps in future posts.</p>","frontmatter":{"date":"08 February 2017","slug":"/2017/02/use-ansible-to-deploy-a-docker-container","title":"Use Ansible to Deploy a Docker Container"}}},"pageContext":{"slug":"/2017/02/use-ansible-to-deploy-a-docker-container"}}}