{"componentChunkName":"component---src-templates-article-js","path":"/2017/11/inspect-docker-compose-network-traffic-with-tcpdump","result":{"data":{"markdownRemark":{"html":"<p>I was recently involved in a project deploying a Django application to AWS EC2 Container Service. I had spent a few days\nbuilding the app into a container alongside a RabbitMQ and Postgres containers. I made use of docker compose to run &#x26;\ntested locally.</p>\n<p>There came point where I needed to quickly check the amount of TCP traffic being sent to a specific third-party API.</p>\n<h2>Basic Compose Network</h2>\nWhen you startup your containers with docker compose, a network is automatically created for your containers.\n<p><strong>Check all the containers are still running</strong></p>\n<pre><code class=\"bash\">$ docker-compose ps\n         Name      State                    Ports\n-------------------------------------------------------------------\ndjango_app_1       Up      0.0.0.0:5000-&gt;5000/tcp\ndjango_db_1        Up      5432/tcp\ndjango_rabbit_1    Up      25672/tcp, 4369/tcp, 5671/tcp, 5672/tcp\n</code></pre>\n<p><strong>View the network created for the containers</strong></p>\n<pre><code class=\"bash\">$ docker network ls\nNETWORK ID     NAME                  DRIVER          SCOPE\n2106f72737b4   django_default        bridge          local\n1c8fc1a172a5   host                  host            local\nc0504b7be27b   none                  null            local\nbb5f6238e0e9   bridge                bridge          local\n</code></pre>\n<p>The network allows your containers to communicate between each other without affecting the host's network.</p>\n<blockquote>You can't just use tcpdump from the host because the docker network is isolated from the host network by default.</blockquote>\n<h2>Attaching to a Compose network</h2>\nInstead I can attach to the compose network using the <code>--net</code> parameter in my <code>docker run</code> command. From this new container I can access the network interface for the containers running with docker-compose.\n<pre><code class=\"bash\"># Run a Debian container attached to the docker-compose network\n$ docker run -it --rm --net=container:django_app_1 debian\nroot@f5d9ed725329:/# apt update &amp;&amp; apt install -y tcpdump\n</code></pre>\n<h2>TCPDump for Outbound Traffic</h2>\nNow I can monitor traffic on the network using regular tcpdump commands.\n<pre><code>root@f5d9ed:/# # Running tcpdump on the eth0 interface\nroot@f5d9ed:/# tcpdump -v \\\n           -i eth0 \\\n           -n 'dst host 1.2.3.4 and (dst port 80 or dst port 443)'\ntcpdump: listening on eth0, link-type EN10MB (Ethernet)...\n</code></pre>\nWith this setup I was able to easily inspect the amount of network activity for the container and debug the issue.\n<h2>What about HTTP Traffic</h2>\nAlthough this is okay for TCP and/or UDP traffic there may be a use case where you need to inspect HTTP requests. If this is the case the I would recommend looking into using a proxy tool such as <a href=\"https://hoverfly.io/\">Hovefly</a>.","frontmatter":{"date":"04 November 2017","slug":"/2017/11/inspect-docker-compose-network-traffic-with-tcpdump","title":"Inspect Docker traffic with tcpdump"}}},"pageContext":{"slug":"/2017/11/inspect-docker-compose-network-traffic-with-tcpdump"}}}