{"componentChunkName":"component---src-templates-article-js","path":"/2017/01/using-custom-ssl-certs-with-elixir","result":{"data":{"markdownRemark":{"html":"<h2>Why Custom SSL Certs?</h2>\n<p>While there is a great use-case for token based authentication, there is an emerging trend of using self-signed ssl certs to authenticate against an API.</p>\n<blockquote>\n<p>This has the neat effect of forcing clients to encrypt communications with your API.</p>\n</blockquote>\n<h2>Connecting to an API via Elixir</h2>\n<p>To use custom certs when connecting to an external endpoint make use of the <a href=\"https://github.com/benoitc/hackney\">Hackney</a>\nlibrary which comes bundled with <a href=\"https://github.com/edgurgel/httpoison\">HTTPoison</a>.</p>\n<pre><code class=\"language-elixir\">def deps do\n  [{:httpoison, \"~> 0.10.0\"}]\nend\n</code></pre>\n<p>Remember to include the runtime dependency.</p>\n<pre><code class=\"language-elixir\">def application do\n  [applications: [:httpoison]]\nend\n</code></pre>\n<h2>Making the HTTPS Request</h2>\n<p>Making a request is as simple as supplying the paths to the SSL cert files when calling HTTPoison functions.</p>\n<pre><code class=\"language-elixir\">def https_options() do\n  [\n    hackney: [\n      ssl_options: [\n        cacertfile: \"/path/to/cacertfile.pem\",\n        certfile: \"/path/to/certfile.pem\",\n        keyfile: \"/path/to/keyfile.pem\"\n      ]\n    ]\n  ]\nend\n\ndef get_request(url) do\n    HTTPoison.get(url, [], https_options())\nend\n</code></pre>\n<p><em>I like to separate the hackney settings purely for readability reasons.</em></p>\n<h2>Conclusion</h2>\n<p>By adding SSL Certs as an authentication mechanism you force your clients to use SSL when communicating with your API. The drawback to this approach is that it still suffers from the same client side trust issues as with basic auth.</p>\n<blockquote>\n<p>If the client accidentally leaks their cert then then you will need to make use of <a href=\"https://jamielinux.com/docs/openssl-certificate-authority/certificate-revocation-lists.html\">Certificate Revocation Lists</a> (CRLs) to protect your API from malicious activity.</p>\n</blockquote>\n<p>Additional to this some clients may not be as familiar with the certificate generation and signing process which could\ndeter smaller clients from implementing your API.</p>","frontmatter":{"date":"30 January 2017","slug":"/2017/01/using-custom-ssl-certs-with-elixir","title":"Using Custom SSL Certs with Elixir"}}},"pageContext":{"slug":"/2017/01/using-custom-ssl-certs-with-elixir"}}}