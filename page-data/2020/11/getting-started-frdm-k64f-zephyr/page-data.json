{"componentChunkName":"component---src-templates-article-js","path":"/2020/11/getting-started-frdm-k64f-zephyr","result":{"data":{"markdownRemark":{"html":"<h2>Getting Closer to the Curcuits</h2>\n<p>Over the past few months I've been having farily regular meetings with customers who are building startups in the IoT\nspace. IoT was once a big hit and it has me thinking if there really was a lull or if my Kubernetes distraction has lead\nme astray.</p>\n<p>IoT is very much still alive and the recent sighting of projects such as K3s and KubeEdge bringing Kubernetes to the edge\nhas sparked the interest of this ex electrical engineering student.</p>\n<p>Almost on a whim I managed to get my hands on a FRDM-K64F MCU and an NVidia Jetson Nano (article comming soon). Having\nboth of these would give me the flexibility to build with AWS IoT Greengrass, FreeRTOS &#x26; Zephyr OS to build embeded\nsystems, IoT gateways and a number of edge device applications.</p>\n<h2>Choosing the Device</h2>\n<p>Both devices were found after consulting the <a href=\"https://devices.amazonaws.com\">AWS IoT Supported Devices Catalog</a> to check\ncompatibility with FreeRTOS, IoT Core &#x26; AWS Greengrass.</p>\n<h3>Why the FRDM-K64F?</h3>\n<p>I didn't spend too long deciding on a board. My main purpose was general tinkering. I chose this board because it was\nlisted as supporting FreeRTOS on the device catalog. It's considered a \"development board\" so I thought that, paired with\nthe same pin configuration as an Ardunio, would give me the options to play around with some of the addon boards in future.</p>\n<p>The ethernet port was essential as I intended to use this device as a internet connected low power device that connected\ninto the AWS Cloud.</p>\n<h2>First Project - Hello World</h2>\n<p>For my first task, I wanted to just get a simple hello world &#x26; blinky application running on my FRDM-K64F. It's been a\nwhile since I last wrote code for a microcontroller and even back then I relied on a GUI. In this project I decided to\ndo away with installing IDEs because I'd prefer to stick with VSCode and my terminal.</p>\n<p>In terms of the RTOS, I initially tried out FreeRTOS but struggled a bit with setting up the tooling around my board. So\nI decided to go with Zephyr OS as a Linux Foundation backed option.</p>\n<h2>Prepping the Board with DAPLink</h2>\n<p>DAPLink is the bit of software that allows the easy flashing and debugging of code that is running on the MCU. When I\nfirst plugged in my board I was able to see the board mount as <code>BOOTLOADER</code>.</p>\n<p>Because my device mounted as <code>BOOTLOADER</code> and not <code>MAINTENANCE</code> the docs required me to update the DAPLink Bootloader\nwhich I did <a href=\"https://os.mbed.com/blog/entry/DAPLink-bootloader-update/\">by following the mbed OS guide</a>.</p>\n<p>Recycling the device power automatically mounted the board as <code>MAITENANCE</code> - good sign. Now I could to</p>\n<pre><code class=\"language-bash\">$ cp ./0244_k20dx_bootloader_update_0x5000.bin /media/BOOTLOADER &#x26;&#x26; sync\n$ # Recycle Power\n$ cp ./0253_k20dx_frdmk64f_0x5000.bin /media/MAINTENANCE &#x26;&#x26; sync\n$ # Recycle Power\n</code></pre>\n<p>This time, when you re-cycle power you should see the board mount as <code>DAPLink</code>.</p>\n<h2>Installing Zephyr OS Dependncies</h2>\n<p>I was working on a fairly fresh installation of Ubuntu 20.04.1 so my next step was to install the Zephyr OS dependencies\n<a href=\"https://docs.zephyrproject.org/latest/getting_started/index.html\">as stated in this guide</a>.</p>\n<p>This gave me access to the <code>west</code> tool that would allow me to build my sample apps and then flash to the device.</p>\n<h2>Loading the Hello World</h2>\n<p>As part of the <a href=\"https://docs.zephyrproject.org/latest/getting_started/index.html\">Zephyr getting started guide</a> you end\nup with a <code>~/zephyrproject/zephyr</code> directory.</p>\n<p>To build the hello world app and flash to your device you do the following:</p>\n<pre><code class=\"language-bash\">$ west build -b frdm_k64f samples/hello_world\n$ west flash\n</code></pre>\n<p>With that you have now got the hello world app running on the FRDM-K64F board.</p>\n<h2>Viewing the Zephyr Hello World Output</h2>\n<p>I'll admit that what stumped me at first glance was how I'd be able to see the Hello World output that the device was\nprinting.</p>\n<p>After some research, I found that it was fairly straight forward thanks to DAPLink. The device appears as a tty under\nthe <code>/dev</code> directory.</p>\n<p>To find the device I need to check dmesg</p>\n<pre><code class=\"language-bash\">$ dmesg | grep tty\n[66555.401523] cdc_acm 1-1:1.1: ttyACM0: USB ACM device\n[66570.292077] cdc_acm 1-1:1.1: ttyACM0: USB ACM device\n</code></pre>\n<p>From this I knew I'd be able to access from <code>/dev/ttyACM0</code>. There was only one last piece of the puzzle and that was to\nset the baud rate of the serial port. This was accomplished using <code>stty</code></p>\n<pre><code class=\"language-bash\">$ stty -F /dev/ttyACM0 115200\n</code></pre>\n<p>With that I could see the output being emitted to the serial port with the following command. All I needed to do was\npush the reset button to see the message pop up.</p>\n<pre><code class=\"language-bash\">$ cat &#x3C; /dev/ttyACM0\n*** Booting Zephyr OS build zephyr-v2.4.0-1133-ge4e3ab3cc315  ***\n\nHello World! frdm_k64f\n</code></pre>\n<h2>Second Project - Blinky Example on the FRDM-K64F</h2>\n<p>The next thing I did was test out the blinky example. Having all the above setup it was easy to build and deploy this\nfrom the provided source code in <code>samples/basic/blinky</code>.</p>\n<pre><code class=\"language-bash\">$ west build -b frdm_k64f samples/basic/blinky\n$ west flash\n</code></pre>\n<p>As expected, on reset my device light started flashing green.</p>\n<h2>Conclusion</h2>\n<p>With this basic example out of the way I felt I was ready to try out some more complicated setups involving ARM, IoT Core\nand the embedded C SDKs for AWS.</p>","frontmatter":{"date":"06 November 2020","slug":"/2020/11/getting-started-frdm-k64f-zephyr","title":"Deploying Zephyr OS on the FRDM-K64F development board"}}},"pageContext":{"slug":"/2020/11/getting-started-frdm-k64f-zephyr"}}}